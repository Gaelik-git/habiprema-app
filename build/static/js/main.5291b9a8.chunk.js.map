{"version":3,"sources":["NIPE/parsing.ts","NIPE/main.ts","NIPE/Nipe.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StimulationType","StimulationParser","stimulations","lines","res","split","typeString","dateTime","type","Visuel","Error","Sonor","date","Date","parse","push","Stimulation","shift","header","dateString","times","nipe","nipemoy","hr","quality","energy","NIPELog","NIPEFile","logs","this","replace","events","stimulation","dateFormat","hours","getHours","minutes","getMinutes","seconds","getSeconds","hoursStr","length","minutesStr","secondsStr","NIPEParser","nipeFile","uneminuteuneminte","quinzetrente","fileContent","parseStimulationTimes","parseNIPEFiles","filter","log","find","s","Math","abs","getTime","forEach","stim","indexOfStim","findIndex","stimType","map","stimu","diff","l","toLine","toOneMinutOneMinuteLine","linesWithSeparator","p","quinzeTrenteFcLine","flat","quinzeTrenteNipeLine","workBook","Sheets","xlsx","json_to_sheet","getSheetOne","getSheetTwo","getSheetThree","getSheetFour","SheetNames","parser","readStimulations","readNIPEfile","uneMinuteUneMinute","quinzeTrenteMap","writeAll","Nipe","props","handleChangeStimulations","event","setState","target","value","handleChangeLogs","excecution","state","join","name","id","cols","rows","stimulationsString","onChange","logsString","onClick","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5291b9a8.chunk.js","sourcesContent":["export enum StimulationType {\n    Visuel,\n    Sonor,\n}\n\nexport default class StimulationParser {\n\n    stimulations: string[] = [];\n\n    static parseStimulationTimes(lines : string[]): Stimulation[] {\n        const res = [];\n\n        for (const line of lines) {\n            const [typeString, dateTime] = line.split(\" \");\n\n\n            let type : StimulationType;\n\n            if(typeString === \"V\"){\n                type = StimulationType.Visuel;\n            }else if (typeString === \"S\"){\n                type = StimulationType.Sonor;\n            }else {\n                throw new Error(\"La ligne n'est pas formatt√© correctement on attend `S 10:40:35`\");\n            }\n\n            const date = new Date(Date.parse(`1970-01-01T${dateTime}`));\n\n            res.push(new Stimulation(type, date));\n\n        }\n\n        return res;\n\n    }\n\n    static parseNIPEFiles(lines : string[]): NIPEFile {\n        const res : NIPELog[] = [];\n\n        const date = lines.shift();\n        const header = lines.shift();\n\n        for (const line of lines) {\n            const [\n                dateString,\n                times,\n                nipe,\n                nipemoy,\n                hr,\n                quality,\n                energy,\n            ] = line.split(`\\t`);\n\n            const date = new Date(Date.parse(`1970-01-01T${dateString}`));\n\n            res.push(new NIPELog(date, +times, +nipe, +nipemoy, +hr, +quality, +energy));\n\n        }\n\n        return new NIPEFile(date!, header!, res);\n\n    }\n\n}\n\nexport class NIPEFile {\n\n    date: string;\n    header: string[];\n    logs: NIPELog[]\n\n    constructor(date: string, header: string, logs: NIPELog[]){\n        this.date = date;\n        this.header = header.replace(\"\\t\\t\", \"\\t\").split(\"\\t\");\n        this.logs = logs;\n    }\n\n}\n\nexport class NIPELog {\n\n    date: Date;\n    times: number;\n    nipe: number;\n    nipemoy: number;\n    hr: number;\n    quality: number;\n    energy: number;\n    events: number | null;\n\n    stimulation: string = \"\";\n\n    constructor(\n        date: Date, \n        times: number, \n        nipe: number, \n        nipemoy: number, \n        hr: number, \n        quality: number, \n        energy: number, \n        //events: number,\n    ){\n        this.date = date;\n        this.times = times;\n        this.nipe = nipe;\n        this.nipemoy = nipemoy;\n        this.hr = hr;\n        this.quality = quality;\n        this.energy = energy;\n        this.events = null;\n    }\n\n    toLine(): [string, number, number, number, number, number, number] {\n        return [`${dateFormat(this.date)}`, this.times, this.nipe, this.nipemoy, this.hr, this.quality, this.energy];\n    }\n\n    toOneMinutOneMinuteLine(): [string, number, number, number, number, string] {\n        return [`${dateFormat(this.date)}`, this.times, this.nipe, this.hr, this.quality, this.stimulation];\n    }\n\n    quinzeTrenteFcLine(): any {\n        return [`${dateFormat(this.date)}`, this.hr, this.stimulation];\n    }\n\n    quinzeTrenteNipeLine(): any {\n        return [`${dateFormat(this.date)}`, this.nipe, this.stimulation];\n    }\n}\n\nfunction dateFormat(date: Date): string {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n\n    let hoursStr = `${hours}`;\n    if (hoursStr.length === 1) hoursStr = \"0\" + hoursStr;\n\n    let minutesStr = `${minutes}`;\n    if (minutesStr.length === 1) minutesStr = \"0\" + minutesStr;\n\n    let secondsStr = `${seconds}`;\n    if (secondsStr.length === 1) secondsStr = \"0\" + secondsStr;\n\n    return `${hoursStr}:${minutesStr}:${secondsStr}`\n}\n\n\nexport class Stimulation {;\n\n    type: StimulationType;\n    date: Date;\n\n    constructor(type: StimulationType, date: Date) {\n        this.type = type;\n        this.date = date;\n    }\n\n}\n","import StimulationParser, { NIPEFile, NIPELog, Stimulation, StimulationType } from \"./parsing\";\nimport * as xlsx from \"xlsx\";\nimport { WorkBook } from \"xlsx\";\n\nexport default class NIPEParser {\n\n    stimulations : Stimulation[] = [];\n    nipeFile: NIPEFile | null = null;\n\n    uneminuteuneminte: NIPELog[] = [];\n    quinzetrente: NIPELog[][] = [];\n\n    static parse(stimulations: string[], logs: string[]) {\n        const parser = new NIPEParser();\n        parser.readStimulations(stimulations);\n        parser.readNIPEfile(logs);\n        parser.uneMinuteUneMinute();\n        parser.quinzeTrenteMap();\n        parser.writeAll();\n    }\n\n    readStimulations(fileContent: string[]) {\n        const stimulation = StimulationParser.parseStimulationTimes(fileContent);\n        this.stimulations = stimulation;\n    }\n\n    readNIPEfile(fileContent: string[]) {\n        const nipeFile = StimulationParser.parseNIPEFiles(fileContent);\n        this.nipeFile = nipeFile;\n    }\n\n    uneMinuteUneMinute() {\n\n        this.uneminuteuneminte = this.nipeFile!.logs.filter(\n            log => {\n                const stim = this.stimulations.find(s => Math.abs(s.date.getTime() - log.date.getTime()) <= 60000 );\n                if(!stim) return false;\n                return true;\n            }\n        )\n\n        this.stimulations.forEach(stim => {\n            const log = this.uneminuteuneminte.find(log => log.date.getTime() === stim.date.getTime())!;\n            const stimOfSameType = this.stimulations.filter(s => s.type === stim.type);\n            const indexOfStim = stimOfSameType.findIndex( s => s == stim);\n            const stimType = StimulationType[stim.type][0];\n\n            log.stimulation = `${stimType}${ indexOfStim + 1}`;\n        })\n    }\n\n    quinzeTrenteMap() {\n\n        this.quinzetrente = this.stimulations.map(\n            stimu => this.nipeFile!.logs.filter(\n                log => {\n                    const diff = (log.date.getTime() - stimu.date.getTime()) / 1000;\n                    return diff >= -15 && diff <= 30\n                }\n            )\n        )\n    }\n\n    getSheetOne(): unknown[] {\n        return [\n            [this.nipeFile!.date],\n            this.nipeFile!.header,\n            ...this.nipeFile!.logs.map(l => l.toLine())\n        ]\n    }\n\n    getSheetTwo(): unknown[] {\n        return [\n            [this.nipeFile!.date],\n            [\"Time\",\"Time(s)\",\"NIPE\",\"HR\",\"Quality\"],\n            ...this.uneminuteuneminte.map(l => l.toOneMinutOneMinuteLine())\n        ]\n    }\n\n\n    getSheetThree(): unknown[] {\n\n        const lines = this.quinzetrente.map(p => p.map( l => l.quinzeTrenteFcLine()));\n        const linesWithSeparator = lines.map(l => [...l, \"\", \"\", \"\", \"\"]);\n\n        return [\n            [\"Time\", \"FC\", \"Stim\"],\n            ...linesWithSeparator.flat()\n        ]\n    }\n\n    getSheetFour(): unknown[] {\n\n        const lines = this.quinzetrente.map(p => p.map( l => l.quinzeTrenteNipeLine()));\n        const linesWithSeparator = lines.map(l => [...l, \"\", \"\", \"\", \"\"]);\n\n        return [\n            [\"Time\", \"NIPE\", \"Stim\"],\n            ...linesWithSeparator.flat()\n        ]\n    }\n\n    writeAll() {\n\n        const workBook: WorkBook = {\n            Sheets: {\n                \"NIPE T\" : xlsx.utils.json_to_sheet(this.getSheetOne()),\n                \"moins plus 1mn\": xlsx.utils.json_to_sheet(this.getSheetTwo()),\n                \"FC 15-30\": xlsx.utils.json_to_sheet(this.getSheetThree()),\n                \"NIPE 15-30\": xlsx.utils.json_to_sheet(this.getSheetFour())\n            },\n            SheetNames: [\"NIPE T\", \"moins plus 1mn\", \"FC 15-30\", \"NIPE 15-30\"]\n        };\n\n        xlsx.writeFile(workBook, \"nipe.xlsx\")\n    }\n}\n\n","import React from \"react\";\nimport NIPEParser from \"./main\";\n\ntype NipeState = {\n    stimulations: string[],\n    logs: string[]\n  }\n\nexport default class Nipe extends React.Component<{}, NipeState> {\n\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n          stimulations: [\n            \"V 10:47:40\",\n            \"S 10:50:25\"\n            ],\n            logs: [\n                \"Date: 28/08/2020 10:01:03\",\n                \"Time\t\tTime(s)\tNIPE\tNIPEmoy\tHR\tQuality\tEnergy\tEvents\",\n                \"10:01:04\t1\t0\t0\t0\t0\t0.912\t\",\n                \"10:01:05\t2\t0\t0\t0\t0\t0.925\t\",\n                \"10:01:06\t3\t0\t0\t0\t0\t0.932\t\",\n                \"10:01:07\t4\t0\t0\t0\t0\t0.947\t\",\n            ]\n        };\n\n\n    }\n\n    get stimulationsString() {\n        return this.state.stimulations.join(`\\n`);\n    }\n    \n    get logsString() {\n        return this.state.logs.join(`\\n`);\n    }\n\n\n  handleChangeStimulations = (event: { target: { value: string; }; }) => {\n    this.setState({stimulations: event.target.value.split(`\\n`)});\n  }\n\n  handleChangeLogs = (event: { target: { value: string; }; }) => {\n    this.setState({logs: event.target.value.split(`\\n`)});\n  }\n\n  excecution = () => {\n    NIPEParser.parse(this.state.stimulations, this.state.logs);\n  }\n\n    render() {\n      return <div>\n          <span>\n            <p>Stimulations</p>\n            <textarea name=\"Stimulation\" id=\"logs\" cols={30} rows={10} \n                value={this.stimulationsString}\n                onChange={this.handleChangeStimulations}\n            ></textarea>\n          </span>\n          <span>\n            <p>Logs</p>\n            <textarea name=\"logs\" id=\"logs\" cols={100} rows={10} \n            value={this.logsString}\n            onChange={this.handleChangeLogs}\n            ></textarea>\n          </span>\n          <div>\n            <button onClick={this.excecution}> Executer le traitement </button>\n          </div>\n        </div>\n        \n      ;\n    }\n}","import React from 'react';\nimport './App.css';\nimport Nipe from './NIPE/Nipe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          Donn√©es NIPE\n          <Nipe></Nipe>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}